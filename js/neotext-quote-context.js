/* * Quote-Context JS Library * https://github.com/neotext/neotext-quote-context/ * * Copyright 2015, Tim Langeman * http://www.openpolitics.com/tim * * Licensed under the MIT license: * http://www.opensource.org/licenses/MIT */popup_library = "jQuery";hidden_container = "neotext_container";	// div in footer than holds injected json data, requires css class to hidejQuery.curCSS = 'jQuery.css';jQuery.fn.quoteContext = function() {	// Add "before" and "after" sections to quote excerpts	// Designed to work for "blockquote" and "q" tags	//Setup hidden div to store all quote metadata	jQuery(this).each(function(){		// Loop through all the submitted tags (blockquote or q tags) and see if any have a cite attribute		if( jQuery(this).attr("cite") ){			var blockcite = jQuery(this);			var url = blockcite.attr("cite").replace("+", "%20");			// If they have a cite tag, check to see if its hash is already saved 			if (url.length > 3){				var tag_type = jQuery(this)[0].tagName.toLowerCase();				var url_quote = url + "|" + blockcite.text();				var quote_hash = jQuery.md5(encodeURIComponent(url_quote)); 				var json = null;				//See if a json summary of this quote was already created and uploaded to the content delivery network			    jQuery.ajax({			        type: "GET",					url: 'http://read.neotext.net/quote/' + quote_hash + '.json',			        dataType: "json",			        success: function(json) {			            add_quote_to_dom(tag_type, json );			        },			        error: function() {						download_quote_from_url(url, blockcite.text());			        }			    });				function add_quote_to_dom(tag_type, json ) {					if ( tag_type == "q"){						var q_id = "hidden_" + json['quote_hash'];												//Add content to a hidden div, so that the popup can later grab it						jQuery("#" + hidden_container).append( 							"<div id='" + q_id + "' class='highslide-maincontent'>.. " +								json['before'] + " " + " <strong>" + json['quote'] + "</strong> " + 								json['after'] + ".. </p>" +								"<p><a href='" + json['url'] + "' target='_blank'>Read more</a> | <a href='javascript:close_popup(" + q_id + ");'>Close</a> </p></div>");						//Style quote as a link that calls the popup expander:  return this.onclick()						blockcite.wrapInner("<a href='" + blockcite.attr('cite') + "' " +							"onmouseover='return this.onclick()' " +							"onmouseover='return this.onclick()'" +							"onclick='return expand_popup(this ,\"" + q_id +"\")' " +							 " />");					}					else if ( tag_type == "blockquote"){						//Fill before and after divs and then quickly hide them						blockcite.before("<div class='quote_context' id='quote_before_" + json['quote_hash'] + "'> \							<blockquote class='quote_context'>.. " + json["before"] + "</blockquote></div>");						blockcite.after("<div class='quote_context' id='quote_after_" + json['quote_hash'] + "'> \							<blockquote class='quote_context'>" + json["after"] + " ..</blockquote></div>");						var context_before = jQuery("#quote_before_" + json['quote_hash']);						var context_after = jQuery("#quote_after_" + json['quote_hash']);						context_before.hide();						context_after.hide();						//Display arrows if content is found						if( json['before'].length > 0){						context_before.before("<div class='quote_arrows' id='context_up_" + json['quote_hash'] + "'> \							<a href=\"javascript:toggle_quote('before', 'quote_before_" + json['quote_hash'] + "');\">&#9650;</a></div>");						}						if( json['after'].length > 0){											context_after.after("<div class='quote_arrows' id='context_down_" + json['quote_hash'] +"'> \							<a href=\"javascript:toggle_quote('after', 'quote_after_" + json['quote_hash'] +"');\">&#9660;</a></div>");						}					}				}			/* Call Neotext.net webservice to retreive quote from origin			*  Calculate before and after offsets			*  Save results to database and output json */			function download_quote_from_url(url,quote) {			    jQuery.ajax({			        type: "POST",			        url: 'http://write.neotext.net/quote/',					data: {'url': url, 'quote': quote},			        dataType: "json",			        success: function(json) {			            add_quote_to_dom( json );						return json;			        },			        error: function() {						console.log("Neotext: unable to find quote on original site: '" + quote + "' \n" + url);			        }			    });			}			} // if url.length is not blank		}	// if "this" has a "cite" attribute			});	   //   jQuery(this).each(function() { : blockquote, or q tag};function toggle_quote(section, id){	jQuery("#" + id).fadeToggle();}				function expand_popup(tag, hidden_popup_id){  if (popup_library == "highslide"){	return hs.htmlExpand(tag, {maincontentId: hidden_popup_id });  }  else {	jQuery.curCSS = jQuery.css;		// Setup Initial Dialog box	jQuery("#" + hidden_popup_id).dialog({		autoOpen: false,		closeOnEscape: true,		closeText: "hide", 		draggableType: true,		resizable: true,		width: 400,		modal: false,		title: 'powered by neotext.net',		hide: { effect: "size", duration: 400 },		show: { effect: "scale", duration: 400 },	  });	// Add centering and other settings	jQuery("#" + hidden_popup_id).dialog("option", "position", { at: "center center", of: tag}		).dialog("option", "hide", { effect: "size", duration: 400 }		).dialog("option", "show", { effect: "scale", duration: 400 }				).dialog( {"title" : "powered by neotext.net"}		).dialog("open"		).blur( 			//console.log("logging Neotext dialog blur ..")	);		// Close popup when you click outside of it	jQuery(document).mouseup(function(e) {	  var popupbox = jQuery(".ui-widget-overlay");	  if (popupbox.has(e.target).length === 0){	  	 //$("#" + hidden_popup_id).dialog("close");	  }	});  }}function close_popup(hidden_popup_id){	// assumes jQuery library	jQuery(hidden_popup_id).dialog("close");}